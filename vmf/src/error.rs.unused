use serde::ser;
use std::fmt;
use std::fmt::Display;

#[derive(Clone, Debug, PartialEq)]
pub enum SerializeError {
	Message(String),
}

impl std::error::Error for SerializeError {}

impl fmt::Display for SerializeError {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		match self {
			SerializeError::Message(e) => write!(f, "unexpected item in bagging area: {}", e),
		}
	}
}

impl ser::Error for SerializeError {
	fn custom<T: Display>(msg: T) -> Self {
		SerializeError::Message(msg.to_string())
	}
}
